generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId     String      @id @default(uuid()) @map("user_id")
  name       String
  email      String      @unique
  loginId    String      @unique @map("login_id")
  password   String
  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime    @default(now()) @map("updated_at")
  attempt    Attempt?
  histories  History[]
  portfolios Portfolio[]
  records    Record[]
  wallet     Wallet?
}

model Choice {
  choiceId     Int      @id @default(autoincrement()) @map("choice_id")
  questionId   Int      @map("question_id")
  choiceText   String   @map("choice_text")
  choiceNumber Int      @map("choice_number")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")
  question     Question @relation(fields: [questionId], references: [questionId], onDelete: Cascade)
}

model Question {
  questionId   Int      @id @default(autoincrement()) @map("question_id")
  questionText String   @map("question_text")
  answer       Int
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")
  choices      Choice[]
  records      Record[]
}

model Record {
  recordId    Int      @id @default(autoincrement()) @map("record_id")
  userId      String   @map("user_id")
  questionId  Int      @map("question_id")
  createdAt   DateTime @default(now()) @map("created_at")
  recordCount Int      @default(1) @map("record_count")
  updatedAt   DateTime @default(now()) @map("updated_at")
  question    Question @relation(fields: [questionId], references: [questionId], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@unique([userId, questionId])
}

model History {
  historyId       Int             @id @default(autoincrement()) @map("history_id")
  userId          String          @map("user_id")
  stockId         Int             @map("stock_id")
  historyQty      Int?            @map("history_qty")
  price           Int?
  transactionType TransactionType @map("transaction_type")
  createdAt       DateTime        @default(now()) @map("created_at")
  stocks          Stock           @relation(fields: [stockId], references: [stockId])
  user            User            @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Stock {
  stockId    Int         @id @default(autoincrement()) @map("stock_id")
  stockCode  String      @unique @map("stock_code") @db.Char(6)
  stockName  String      @map("stock_name")
  category   Int?        @default(7)
  stockImage String?     @map("stock_image")
  stockOpen  String?     @map("stock_open")
  faceValue  Int         @map("face_value")
  totalShare BigInt      @map("total_share")
  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime    @default(now()) @map("updated_at")
  history    History[]
  Portfolio  Portfolio[]
}

model Wallet {
  userId    String   @id @map("user_id")
  cash      BigInt   @default(0)
  account   BigInt   @default(1000000)
  target    BigInt   @default(2000000)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  user      User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Portfolio {
  portfolioId Int      @id @default(autoincrement()) @map("portfolio_id")
  userId      String   @map("user_id")
  stockId     Int      @map("stock_id")
  stockQty    Int      @map("stock_qty")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_at")
  total       BigInt
  stock       Stock    @relation(fields: [stockId], references: [stockId])
  user        User     @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@unique([userId, stockId])
}

model Attempt {
  attemptId Int      @id @default(autoincrement()) @map("attempt_id")
  userId    String   @unique @map("user_id")
  quizDate  DateTime @default(now()) @map("quiz_date")
  user      User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

enum TransactionType {
  BUY
  SELL
}
