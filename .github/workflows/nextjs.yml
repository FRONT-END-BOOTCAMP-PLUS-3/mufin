# Sample workflow for building and deploying a Next.js site to GitHub Pages
#
# To get started with Next.js see: https://nextjs.org/docs/getting-started
#
name: Deploy Mufin

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["deploy"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "deploy"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      # 2. 패키지 매니저 감지(yarn 또는 npm)
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi
      
      # 3. Node.js 환경 설정
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}
          
      # 4. 의존성 설치
      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
      
      #5 Prisma Client 생성
      - name: Generate Prisma Client
        run: npx prisma generate

      # 6. Next.js 애플리케이션 빌드
      - name: Build with Next.js
        run: ${{ steps.detect-package-manager.outputs.runner }} next build
          
      # 7. 빌드 속도 개선을 위한 캐시 qhrdnjs
      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}

      # 8. 정적 사이트 내보내기 (빌드 산출물이 ./out에 생성된다고 가정)
      - name: Export Static Site
        run: npm run export
     
     # 9. 빌드 산출물을 아티팩트로 업로드 (배포 단계에서 사용)
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          path: ./out

  # Deployment job
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      # 10. 빌드 산출물 다운로드
      - name: Download Build Artifact
        uses: actions/download-artifact@v3
        with:
          name: build-output
          path: ./build-output

      # 10. SSH를 통해 Linux 서버에 배포
      - name: Deploy to Linux Server via SSH
        uses: appleboy/ssh-action@master
        with:
          host: rland.co.kr             
          username: mufindata            
          port: 23                    	  
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            cd /home/mufindata
            
            echo "Creating .env file..."
            cat << 'EOF' > .env
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            NEXT_PUBLIC_BASE_URL=${{ vars.NEXT_PUBLIC_BASE_URL }}
            REDIS_URL=${{ secrets.REDIS_URL }}
            NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
            KIS_API_URL=${{ vars.KIS_API_URL }}
            KIS_APP_KEY=${{ secrets.KIS_APP_KEY }}
            KIS_APP_SECRET=${{ secrets.KIS_APP_SECRET }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            SMTP_EMAIL_USER=${{ secrets.SMTP_EMAIL_USER }}
            SMTP_EMAIL_PASSWORD=${{ secrets.SMTP_EMAIL_PASSWORD }}
            EOF
            
            echo "Removing previous build files..."
            rm -rf *
            echo "Copying new build files..."
            cp -R $GITHUB_WORKSPACE/build-output/* .
            echo "Installing production dependencies..."
            npm install --production
            echo "Restarting application..."
            pm2 restart all
