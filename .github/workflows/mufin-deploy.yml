# 워크 플로우 이름 : 우분투 서버에서 빌드와 배포를 위한 워크 플로우
name: 'Build and Deploy to Ubuntu Server Run'

# master 브랜치에 push 가 발생하면 jobs가 실행되도록 이벤트 설정
on:
   push:
    branches:
          - main # master 브랜치에 push 가 발생하면
          - deploy

  # 위에 설정된 push 이벤트를 실행할 job들의 순서를 정한다.
jobs:
  # 각 단계는 순서대로 실행되는 것이 아니며 반드시 모든 단계를 포함할 필요도 없다

  # 첫번째 단계 : 빌드
  build:
    runs-on: [self-hosted, mufin-server]
    

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          clean: true  

      - name: Create .env file
        run: |
          echo "Creating .env file..."
          rm -f .env  # 기존 파일 삭제
          cat << EOF > .env
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            NEXT_PUBLIC_BASE_URL=${{ secrets.NEXT_PUBLIC_BASE_URL }}
            REDIS_URL=${{ secrets.REDIS_URL }}
            NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
            KIS_API_URL=${{ secrets.KIS_API_URL }}
            KIS_APP_KEY=${{ secrets.KIS_APP_KEY }}
            KIS_APP_SECRET=${{ secrets.KIS_APP_SECRET }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            SMTP_EMAIL_USER=${{ secrets.SMTP_EMAIL_USER }}
            SMTP_EMAIL_PASSWORD=${{ secrets.SMTP_EMAIL_PASSWORD }}
            ORDER_BOOK_KIS_API_KEY=${{ secrets.ORDER_BOOK_KIS_API_KEY }}
            ORDER_BOOK_KIS_SECRET=${{ secrets.ORDER_BOOK_KIS_SECRET }}
            EOF
          
          echo "✅ .env file created successfully!"
          cat .env  # 🚀 생성된 파일 내용 확인
          
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Build Next.js Project
        run: npm run build

      #5 Prisma Client 생성
      - name: Generate Prisma Client
        run: npx prisma generate
        
  # 세번째 단계: 배포
  deploy:
    runs-on: [self-hosted, mufin-server]
    # runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'
          
           # 10. SSH를 통해 Linux 서버에 배포
      # - name: Deploy to Remote Server via SSH
      #   uses: appleboy/ssh-action@v1.0.3
      #   with:
      #     host: ${{ secrets.SSH_HOST }}             
      #     username: ${{ secrets.SSH_USER }}           
      #     port: 23                    	  
      #     key: ${{ secrets.SSH_PRIVATE_KEY}}
      #     script: |
      #       cd ~

      #        # 리포지토리 확인 후 처리
      #       if [ ! -d "/home/mufindata/www/mufin/.git" ]; then
      #         echo "리포지토리가 없습니다. 클론을 진행합니다..."
      #         git clone --depth=1 https://github.com/FRONT-END-BOOTCAMP-PLUS-3/mufin.git
      #       else
      #         echo "리포지토리가 존재합니다. 최신 코드 가져오기..."
      #         cd /home/mufindata/www/mufin
      #         git fetch origin main
      #         if ! git diff --quiet HEAD origin/main; then
      #           git reset --hard origin/main
      #           git checkout main
      #         else
      #           echo "변경 사항 없음"
      #         fi
      #       fi

      #       cd /home/mufindata/www/mufin

            
      #       echo "Creating .env file..."
      #       rm -f .env  # 기존 파일 삭제
      #       cat << EOF > .env
      #       DATABASE_URL=${{ secrets.DATABASE_URL }}
      #       NEXT_PUBLIC_BASE_URL=${{ secrets.NEXT_PUBLIC_BASE_URL }}
      #       REDIS_URL=${{ secrets.REDIS_URL }}
      #       NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
      #       KIS_API_URL=${{ secrets.KIS_API_URL }}
      #       KIS_APP_KEY=${{ secrets.KIS_APP_KEY }}
      #       KIS_APP_SECRET=${{ secrets.KIS_APP_SECRET }}
      #       JWT_SECRET=${{ secrets.JWT_SECRET }}
      #       SMTP_EMAIL_USER=${{ secrets.SMTP_EMAIL_USER }}
      #       SMTP_EMAIL_PASSWORD=${{ secrets.SMTP_EMAIL_PASSWORD }}
      #       ORDER_BOOK_KIS_API_KEY=${{ secrets.ORDER_BOOK_KIS_API_KEY }}
      #       ORDER_BOOK_KIS_SECRET=${{ secrets.ORDER_BOOK_KIS_SECRET }}
      #       EOF

      #       npm ci
      #       npm run build
            
      #        # PM2 프로세스 확인 후 처리
      #       if pm2 list | grep -q 'mufin'; then
      #         echo "프로세스가 실행 중입니다. Reload 진행..."
      #         pm2 restart mufin
      #       else
      #         echo "프로세스가 실행 중이 아닙니다. 새로 실행합니다..."
      #         pm2 start npm --name "mufin" -- run start -- -p 3060
      #         pm2 save
      #       fi

      - name: Deploy Next.js Project
        run: /home/mufindata/www/mufin/next-mufin-update.sh
